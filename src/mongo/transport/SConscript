# -*- mode: python -*-

Import('env')

env = env.Clone()

env.Library(
    target='transport_layer_common',
    source=[
        'ismaster_metrics.cpp',
        'service_entry_point_utils.cpp',
        'session.cpp',
        'transport_layer.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
        '$BUILD_DIR/mongo/db/service_context',
    ],
)

env.Library(
    target='transport_layer_mock',
    source=[
        'transport_layer_mock.cpp',
    ],
    LIBDEPS=[
        'transport_layer_common',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/mongo/util/net/network',
    ],
)

grpcEnv = env.Clone()

# TODO: Remove third_party abseil since gRPC is built with its own copy. This will
#       not be required in the future when we bundle gRPC itself, we can link to our
#       own vendored libabseil.
grpcEnv['CPPPATH'] = [p for p in grpcEnv['CPPPATH'] if not 'abseil' in p]

grpcEnv.Library(
    target='transport_layer_grpc',
    source=[
        'transport_layer_grpc.cpp',
        'mongodb.grpc.pb.cc',
        'mongodb.pb.cc',
    ],
    LIBDEPS=[
        'transport_layer_common',

        # TODO: this is highly suspect, but it works for now..

        '/home/ubuntu/opt/lib/libaddress_sorting.a',
        '/home/ubuntu/opt/lib/libcares_static.a',
        '/home/ubuntu/opt/lib/libgpr.a',
        '/home/ubuntu/opt/lib/libgrpc.a',
        '/home/ubuntu/opt/lib/libgrpc++.a',
        '/home/ubuntu/opt/lib/libgrpc++_reflection.a',
        '/home/ubuntu/opt/lib/libprotobuf.a',
        '/home/ubuntu/opt/lib/libupb.a',
        '/home/ubuntu/opt/lib/libre2.a',

        '/home/ubuntu/opt/lib/libabsl_bad_any_cast_impl.a',
        '/home/ubuntu/opt/lib/libabsl_bad_optional_access.a',
        '/home/ubuntu/opt/lib/libabsl_bad_variant_access.a',
        '/home/ubuntu/opt/lib/libabsl_base.a',
        '/home/ubuntu/opt/lib/libabsl_city.a',
        '/home/ubuntu/opt/lib/libabsl_civil_time.a',
        '/home/ubuntu/opt/lib/libabsl_cord.a',
        '/home/ubuntu/opt/lib/libabsl_debugging_internal.a',
        '/home/ubuntu/opt/lib/libabsl_demangle_internal.a',
        '/home/ubuntu/opt/lib/libabsl_examine_stack.a',
        '/home/ubuntu/opt/lib/libabsl_exponential_biased.a',
        '/home/ubuntu/opt/lib/libabsl_failure_signal_handler.a',
        '/home/ubuntu/opt/lib/libabsl_flags.a',
        '/home/ubuntu/opt/lib/libabsl_flags_commandlineflag.a',
        '/home/ubuntu/opt/lib/libabsl_flags_commandlineflag_internal.a',
        '/home/ubuntu/opt/lib/libabsl_flags_config.a',
        '/home/ubuntu/opt/lib/libabsl_flags_internal.a',
        '/home/ubuntu/opt/lib/libabsl_flags_marshalling.a',
        '/home/ubuntu/opt/lib/libabsl_flags_parse.a',
        '/home/ubuntu/opt/lib/libabsl_flags_private_handle_accessor.a',
        '/home/ubuntu/opt/lib/libabsl_flags_program_name.a',
        '/home/ubuntu/opt/lib/libabsl_flags_reflection.a',
        '/home/ubuntu/opt/lib/libabsl_flags_usage.a',
        '/home/ubuntu/opt/lib/libabsl_flags_usage_internal.a',
        '/home/ubuntu/opt/lib/libabsl_graphcycles_internal.a',
        '/home/ubuntu/opt/lib/libabsl_hash.a',
        '/home/ubuntu/opt/lib/libabsl_hashtablez_sampler.a',
        '/home/ubuntu/opt/lib/libabsl_int128.a',
        '/home/ubuntu/opt/lib/libabsl_leak_check.a',
        '/home/ubuntu/opt/lib/libabsl_leak_check_disable.a',
        '/home/ubuntu/opt/lib/libabsl_log_severity.a',
        '/home/ubuntu/opt/lib/libabsl_malloc_internal.a',
        '/home/ubuntu/opt/lib/libabsl_periodic_sampler.a',
        '/home/ubuntu/opt/lib/libabsl_random_distributions.a',
        '/home/ubuntu/opt/lib/libabsl_random_internal_distribution_test_util.a',
        '/home/ubuntu/opt/lib/libabsl_random_internal_platform.a',
        '/home/ubuntu/opt/lib/libabsl_random_internal_pool_urbg.a',
        '/home/ubuntu/opt/lib/libabsl_random_internal_randen.a',
        '/home/ubuntu/opt/lib/libabsl_random_internal_randen_hwaes.a',
        '/home/ubuntu/opt/lib/libabsl_random_internal_randen_hwaes_impl.a',
        '/home/ubuntu/opt/lib/libabsl_random_internal_randen_slow.a',
        '/home/ubuntu/opt/lib/libabsl_random_internal_seed_material.a',
        '/home/ubuntu/opt/lib/libabsl_random_seed_gen_exception.a',
        '/home/ubuntu/opt/lib/libabsl_random_seed_sequences.a',
        '/home/ubuntu/opt/lib/libabsl_raw_hash_set.a',
        '/home/ubuntu/opt/lib/libabsl_raw_logging_internal.a',
        '/home/ubuntu/opt/lib/libabsl_scoped_set_env.a',
        '/home/ubuntu/opt/lib/libabsl_spinlock_wait.a',
        '/home/ubuntu/opt/lib/libabsl_stacktrace.a',
        '/home/ubuntu/opt/lib/libabsl_status.a',
        '/home/ubuntu/opt/lib/libabsl_statusor.a',
        '/home/ubuntu/opt/lib/libabsl_str_format_internal.a',
        '/home/ubuntu/opt/lib/libabsl_strerror.a',
        '/home/ubuntu/opt/lib/libabsl_strings.a',
        '/home/ubuntu/opt/lib/libabsl_strings_internal.a',
        '/home/ubuntu/opt/lib/libabsl_symbolize.a',
        '/home/ubuntu/opt/lib/libabsl_synchronization.a',
        '/home/ubuntu/opt/lib/libabsl_throw_delegate.a',
        '/home/ubuntu/opt/lib/libabsl_time.a',
        '/home/ubuntu/opt/lib/libabsl_time_zone.a',
        '/home/ubuntu/opt/lib/libabsl_wyhash.a',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/mongo/util/net/network',
    ],
)

grpcEnv.AppendUnique(
    CPPPATH=['/home/ubuntu/opt/include'],
    LIBPATH=['/home/ubuntu/opt/lib'],

    # TODO: either figure out statically linking or adding a search path to mongo[d,s] build
    # SYSLIBDEPS=['grpc', 'grpc++', 'protobuf']
)

tlEnv = grpcEnv.Clone()
tlEnv.InjectThirdParty(libraries=['asio'])

tlEnv.Library(
    target='transport_layer_manager',
    source=[
        'transport_layer_manager.cpp',
    ],
    LIBDEPS=[
        'transport_layer',
        'transport_layer_grpc'
    ],
    LIBDEPS_PRIVATE=[
        'service_executor',
        '$BUILD_DIR/third_party/shim_asio',
    ],
)

tlEnv.Library(
    target='transport_layer',
    source=[
        'transport_layer_asio.cpp',
        env.Idlc('transport_options.idl')[0],
    ],
    LIBDEPS=[
        'transport_layer_common',
        '$BUILD_DIR/mongo/base/system_error',
        '$BUILD_DIR/mongo/db/auth/authentication_restriction',
        '$BUILD_DIR/mongo/db/server_options_core',
        '$BUILD_DIR/mongo/db/service_context',
        '$BUILD_DIR/mongo/db/stats/counters',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/mongo/idl/server_parameter',
        '$BUILD_DIR/mongo/util/net/ssl_manager',
        '$BUILD_DIR/mongo/util/options_parser/options_parser',
        '$BUILD_DIR/third_party/shim_asio',
    ],
)

# This library will initialize an egress transport layer in a mongo initializer
# for C++ tests that require networking.
env.Library(
    target='transport_layer_egress_init',
    source=[
        'transport_layer_egress_init.cpp',
    ],
    LIBDEPS_PRIVATE=[
        'transport_layer',
    ]
)

tlEnv.Library(
    target='service_executor',
    source=[
        'service_executor_adaptive.cpp',
        'service_executor_reserved.cpp',
        'service_executor_synchronous.cpp',
        env.Idlc('service_executor.idl')[0],
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/db/service_context',
    ],
    LIBDEPS_PRIVATE=[
        "$BUILD_DIR/mongo/idl/server_parameter",
        "$BUILD_DIR/mongo/util/processinfo",
        '$BUILD_DIR/third_party/shim_asio',
        'transport_layer_common',
    ],
)

env.Library(
    target='service_entry_point',
    source=[
        'service_entry_point_impl.cpp',
        'service_state_machine.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/db/auth/authentication_restriction',
        '$BUILD_DIR/mongo/db/dbmessage',
        '$BUILD_DIR/mongo/db/server_options_core',
        '$BUILD_DIR/mongo/db/service_context',
        '$BUILD_DIR/mongo/db/stats/counters',
        '$BUILD_DIR/mongo/rpc/protocol',
        '$BUILD_DIR/mongo/util/processinfo',
        'service_executor',
        'transport_layer_common',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/mongo/db/traffic_recorder',
        '$BUILD_DIR/mongo/transport/message_compressor',
        '$BUILD_DIR/mongo/util/net/ssl_manager',
    ],
)

zlibEnv = env.Clone()
zlibEnv.InjectThirdParty(libraries=['zlib', 'zstd', 'snappy'])
zlibEnv.Library(
    target='message_compressor',
    source=[
        'message_compressor_manager.cpp',
        'message_compressor_metrics.cpp',
        'message_compressor_registry.cpp',
        'message_compressor_snappy.cpp',
        'message_compressor_zlib.cpp',
        'message_compressor_zstd.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
        '$BUILD_DIR/mongo/util/options_parser/options_parser',
        '$BUILD_DIR/third_party/shim_snappy',
        '$BUILD_DIR/third_party/shim_zlib',
        '$BUILD_DIR/third_party/shim_zstd',
    ]
)

env.Library(
    target='message_compressor_options_client',
    source=[
        env.Idlc('message_compressor_options_client.idl')[0],
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
        'message_compressor',
    ],
)

env.Library(
    target='message_compressor_options_server',
    source=[
        env.Idlc('message_compressor_options_server.idl')[0],
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
        'message_compressor',
    ],
)

tlEnv.CppUnitTest(
    target='transport_test',
    source=[
        'message_compressor_manager_test.cpp',
        'message_compressor_registry_test.cpp',
        'transport_layer_asio_test.cpp',
        'service_executor_test.cpp',
        # Disable this test until SERVER-30475 and associated build failure tickets are resolved.
        # 'service_executor_adaptive_test.cpp',
        'max_conns_override_test.cpp',
        'service_state_machine_test.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
        '$BUILD_DIR/mongo/db/dbmessage',
        '$BUILD_DIR/mongo/db/service_context',
        '$BUILD_DIR/mongo/rpc/protocol',
        '$BUILD_DIR/mongo/rpc/rpc',
        '$BUILD_DIR/mongo/unittest/unittest',
        '$BUILD_DIR/mongo/util/clock_source_mock',
        '$BUILD_DIR/mongo/util/net/socket',
        '$BUILD_DIR/third_party/shim_asio',
        'message_compressor',
        'message_compressor_options_server',
        'service_entry_point',
        'service_executor',
        'transport_layer',
        'transport_layer_common',
        'transport_layer_mock',
    ],
)

tlEnv.CppIntegrationTest(
    target='transport_integration_test',
    source=[
        'transport_layer_asio_integration_test.cpp',
    ],
    LIBDEPS=[
        'transport_layer_egress_init',
        '$BUILD_DIR/mongo/base',
        '$BUILD_DIR/mongo/client/async_client',
        '$BUILD_DIR/mongo/executor/task_executor_interface',
        '$BUILD_DIR/mongo/util/net/network',
        '$BUILD_DIR/mongo/util/version_impl',
        '$BUILD_DIR/third_party/shim_asio',
    ],
)
