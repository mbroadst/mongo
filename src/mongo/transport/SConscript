# -*- mode: python -*-

Import('env')

env = env.Clone()

env.Library(
    target='transport_layer_common',
    source=[
        'ismaster_metrics.cpp',
        'service_entry_point_utils.cpp',
        'session.cpp',
        'transport_layer.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
        '$BUILD_DIR/mongo/db/service_context',
    ],
)

env.Library(
    target='transport_layer_mock',
    source=[
        'transport_layer_mock.cpp',
    ],
    LIBDEPS=[
        'transport_layer_common',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/mongo/util/net/network',
    ],
)

grpcEnv = env.Clone()
grpcEnv.InjectThirdParty(libraries=['asio'])

# TODO: Remove third_party abseil since gRPC is built with its own copy. This should
#       not be required in the future if we bundle gRPC itself, we can link to our
#       own vendored libabseil.
grpcEnv['CPPPATH'] = [p for p in grpcEnv['CPPPATH'] if not 'abseil' in p]
grpcPrefix = grpcEnv['GRPC_PREFIX']
# NOTE: I tried using grpcEnv.File and grpcEnv.Dir for all of this to no avail, LIBDEPS
#       does not seem to support file nodes.
grpcLibDepNames = [
    'libaddress_sorting',
    'libcares_static',
    'libgpr',
    'libgrpc',
    'libgrpc++',
    'libgrpc++_reflection',
    'libprotobuf',
    'libupb',
    'libre2',

    'libabsl_bad_any_cast_impl',
    'libabsl_bad_optional_access',
    'libabsl_bad_variant_access',
    'libabsl_base',
    'libabsl_city',
    'libabsl_civil_time',
    'libabsl_cord',
    'libabsl_debugging_internal',
    'libabsl_demangle_internal',
    'libabsl_examine_stack',
    'libabsl_exponential_biased',
    'libabsl_failure_signal_handler',
    'libabsl_flags',
    'libabsl_flags_commandlineflag',
    'libabsl_flags_commandlineflag_internal',
    'libabsl_flags_config',
    'libabsl_flags_internal',
    'libabsl_flags_marshalling',
    'libabsl_flags_parse',
    'libabsl_flags_private_handle_accessor',
    'libabsl_flags_program_name',
    'libabsl_flags_reflection',
    'libabsl_flags_usage',
    'libabsl_flags_usage_internal',
    'libabsl_graphcycles_internal',
    'libabsl_hash',
    'libabsl_hashtablez_sampler',
    'libabsl_int128',
    'libabsl_leak_check',
    'libabsl_leak_check_disable',
    'libabsl_log_severity',
    'libabsl_malloc_internal',
    'libabsl_periodic_sampler',
    'libabsl_random_distributions',
    'libabsl_random_internal_distribution_test_util',
    'libabsl_random_internal_platform',
    'libabsl_random_internal_pool_urbg',
    'libabsl_random_internal_randen',
    'libabsl_random_internal_randen_hwaes',
    'libabsl_random_internal_randen_hwaes_impl',
    'libabsl_random_internal_randen_slow',
    'libabsl_random_internal_seed_material',
    'libabsl_random_seed_gen_exception',
    'libabsl_random_seed_sequences',
    'libabsl_raw_hash_set',
    'libabsl_raw_logging_internal',
    'libabsl_scoped_set_env',
    'libabsl_spinlock_wait',
    'libabsl_stacktrace',
    'libabsl_status',
    'libabsl_statusor',
    'libabsl_str_format_internal',
    'libabsl_strerror',
    'libabsl_strings',
    'libabsl_strings_internal',
    'libabsl_symbolize',
    'libabsl_synchronization',
    'libabsl_throw_delegate',
    'libabsl_time',
    'libabsl_time_zone',
    'libabsl_wyhash',
]

grpcEnv.Library(
    target='transport_layer_grpc',
    source=[
        'transport_layer_grpc.cpp',
        'mongodb.grpc.pb.cc',
        'mongodb.pb.cc',
    ],
    LIBDEPS=[
        'transport_layer_common',
    ] + [ '%s/lib/%s.a' % (grpcPrefix, lib) for lib in grpcLibDepNames ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/mongo/util/net/network',
        '$BUILD_DIR/third_party/shim_asio', # for ASIOReactor
    ]
)

grpcEnv.AppendUnique(
    CPPPATH=['%s/include' % grpcPrefix],
)

tlEnv = grpcEnv.Clone()
tlEnv.InjectThirdParty(libraries=['asio'])

tlEnv.Library(
    target='transport_layer_manager',
    source=[
        'transport_layer_manager.cpp',
    ],
    LIBDEPS=[
        'transport_layer',
        'transport_layer_grpc'
    ],
    LIBDEPS_PRIVATE=[
        'service_executor',
        '$BUILD_DIR/third_party/shim_asio',
    ],
)

tlEnv.Library(
    target='transport_layer',
    source=[
        'transport_layer_asio.cpp',
        env.Idlc('transport_options.idl')[0],
    ],
    LIBDEPS=[
        'transport_layer_common',
        '$BUILD_DIR/mongo/base/system_error',
        '$BUILD_DIR/mongo/db/auth/authentication_restriction',
        '$BUILD_DIR/mongo/db/server_options_core',
        '$BUILD_DIR/mongo/db/service_context',
        '$BUILD_DIR/mongo/db/stats/counters',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/mongo/idl/server_parameter',
        '$BUILD_DIR/mongo/util/net/ssl_manager',
        '$BUILD_DIR/mongo/util/options_parser/options_parser',
        '$BUILD_DIR/third_party/shim_asio',
    ],
)

# This library will initialize an egress transport layer in a mongo initializer
# for C++ tests that require networking.
env.Library(
    target='transport_layer_egress_init',
    source=[
        'transport_layer_egress_init.cpp',
    ],
    LIBDEPS_PRIVATE=[
        'transport_layer',
    ]
)

tlEnv.Library(
    target='service_executor',
    source=[
        'service_executor_adaptive.cpp',
        'service_executor_reserved.cpp',
        'service_executor_synchronous.cpp',
        env.Idlc('service_executor.idl')[0],
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/db/service_context',
    ],
    LIBDEPS_PRIVATE=[
        "$BUILD_DIR/mongo/idl/server_parameter",
        "$BUILD_DIR/mongo/util/processinfo",
        '$BUILD_DIR/third_party/shim_asio',
        'transport_layer_common',
    ],
)

env.Library(
    target='service_entry_point',
    source=[
        'service_entry_point_impl.cpp',
        'service_state_machine.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/db/auth/authentication_restriction',
        '$BUILD_DIR/mongo/db/dbmessage',
        '$BUILD_DIR/mongo/db/server_options_core',
        '$BUILD_DIR/mongo/db/service_context',
        '$BUILD_DIR/mongo/db/stats/counters',
        '$BUILD_DIR/mongo/rpc/protocol',
        '$BUILD_DIR/mongo/util/processinfo',
        'service_executor',
        'transport_layer_common',
    ],
    LIBDEPS_PRIVATE=[
        '$BUILD_DIR/mongo/db/traffic_recorder',
        '$BUILD_DIR/mongo/transport/message_compressor',
        '$BUILD_DIR/mongo/util/net/ssl_manager',
    ],
)

zlibEnv = env.Clone()
zlibEnv.InjectThirdParty(libraries=['zlib', 'zstd', 'snappy'])
zlibEnv.Library(
    target='message_compressor',
    source=[
        'message_compressor_manager.cpp',
        'message_compressor_metrics.cpp',
        'message_compressor_registry.cpp',
        'message_compressor_snappy.cpp',
        'message_compressor_zlib.cpp',
        'message_compressor_zstd.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
        '$BUILD_DIR/mongo/util/options_parser/options_parser',
        '$BUILD_DIR/third_party/shim_snappy',
        '$BUILD_DIR/third_party/shim_zlib',
        '$BUILD_DIR/third_party/shim_zstd',
    ]
)

env.Library(
    target='message_compressor_options_client',
    source=[
        env.Idlc('message_compressor_options_client.idl')[0],
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
        'message_compressor',
    ],
)

env.Library(
    target='message_compressor_options_server',
    source=[
        env.Idlc('message_compressor_options_server.idl')[0],
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
        'message_compressor',
    ],
)

tlEnv.CppUnitTest(
    target='transport_test',
    source=[
        'message_compressor_manager_test.cpp',
        'message_compressor_registry_test.cpp',
        'transport_layer_asio_test.cpp',
        'service_executor_test.cpp',
        # Disable this test until SERVER-30475 and associated build failure tickets are resolved.
        # 'service_executor_adaptive_test.cpp',
        'max_conns_override_test.cpp',
        'service_state_machine_test.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
        '$BUILD_DIR/mongo/db/dbmessage',
        '$BUILD_DIR/mongo/db/service_context',
        '$BUILD_DIR/mongo/rpc/protocol',
        '$BUILD_DIR/mongo/rpc/rpc',
        '$BUILD_DIR/mongo/unittest/unittest',
        '$BUILD_DIR/mongo/util/clock_source_mock',
        '$BUILD_DIR/mongo/util/net/socket',
        '$BUILD_DIR/third_party/shim_asio',
        'message_compressor',
        'message_compressor_options_server',
        'service_entry_point',
        'service_executor',
        'transport_layer',
        'transport_layer_common',
        'transport_layer_mock',
    ],
)

tlEnv.CppIntegrationTest(
    target='transport_integration_test',
    source=[
        'transport_layer_asio_integration_test.cpp',
    ],
    LIBDEPS=[
        'transport_layer_egress_init',
        '$BUILD_DIR/mongo/base',
        '$BUILD_DIR/mongo/client/async_client',
        '$BUILD_DIR/mongo/executor/task_executor_interface',
        '$BUILD_DIR/mongo/util/net/network',
        '$BUILD_DIR/mongo/util/version_impl',
        '$BUILD_DIR/third_party/shim_asio',
    ],
)
